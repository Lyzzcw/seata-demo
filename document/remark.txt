nacos : startup.cmd -m standalone

在seata-1.3.0\script\config-center\nacos中有一个脚本nacos-config.sh则是将
config.txt中的全部配置自动推送到nacos中，运行下面命令（windows可以使用git bash运
行）：# -h 主机，你可以使用localhost，-p 端口号 你可以使用8848，-t 命名空间ID，-u 用户名，-p 密码
$ sh nacos-config.sh -h 127.0.0.1 -p 8848 -g SEATA_GROUP -t 0a6538f6-cefc-47c9-9a60-c398fd3432e3 -u nacos -w nacos


Seata客户端创建很简单，需要注意以下几点内容：

seata客户端的版本需要和服务端保持一致
每个服务的数据库都要创建一个undo_log回滚日志表
客户端指定的事务分组名称要和Nacos相同，比如service.vgroupMapping.seata-account-tx-group=default
前缀：service.vgroupMapping.
后缀：{自定义}


1.4.2及以下版本回滚时抛出Cannot construct instance of `java.time.LocalDateTime` ？
A:

升级1.5.0及以上版本

B:

不要使用mysql driver8.0.x版本

C:

引入kryo相关依赖

            <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>4.0.2</version>
            </dependency>
            <dependency>
                <groupId>de.javakaffee</groupId>
                <artifactId>kryo-serializers</artifactId>
                <version>0.42</version>
            </dependency>
如果配置中心是file,依赖是seata-all,请在应用的file.conf文件中添加如下配置

client {
  undo {
    logSerialization = "kryo"
    }
 }
如果配置中心是file,依赖是seata-spring-boot-starter,使用yml 自行转成yml格式即可

seata.client.undo.logSerialization=kryo
如果是第三方配置中心如nacos

请在seata使用的配置相关group,namespace上添加dataid: client.undo.logSerialization,值为kryo

D:

修改数据库表中的datetime类型为timestamp


Seata的 AT、XA模式都是基于全局事务实现的，在高并发的场景下会出现获取全局锁异常，因此这两种模式都不适用高并发场景；
Seata TCC模式性能比AT模式的好一点，但是并发量大于100的话还是不适合；
如果基本没有什么并发量的话，可以选择AT模式；并发量在一百内的话可以使用TCC模式
高并发下，还是建议使用柔性事务解决方案（rocketmq事务消息），允许暂时的不一致性，保证最终一致性即可。